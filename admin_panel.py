import os
import logging
import asyncio
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import io
import psycopg2.extras
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from database import Database
from dotenv import load_dotenv
from aiogram.types import BufferedInputFile

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("admin_panel.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Telegram)
ADMIN_IDS = [int(id) for id in os.getenv('ADMIN_IDS', '').split(',') if id]

class AdminStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    waiting_for_post_id = State()  # –û–∂–∏–¥–∞–Ω–∏–µ ID –ø–æ—Å—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π
    waiting_for_post_date = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    waiting_for_post_time = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    waiting_for_schedule_time = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π
    waiting_for_timezone = State()  # –û–∂–∏–¥–∞–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
    waiting_for_schedule_slot = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Å–ª–æ—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
    waiting_for_api_key = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è API –∫–ª—é—á–∞

class AdminPanel:
    def __init__(self, bot: Bot, db: Database):
        self.bot = bot
        self.db = db
        self.router = Router()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        # –ö–æ–º–∞–Ω–¥–∞ /admin –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        self.router.message.register(self.cmd_admin, Command(commands=["admin"]))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        self.router.callback_query.register(self.show_scheduled_posts, F.data == "show_scheduled")
        self.router.callback_query.register(self.show_post_stats, F.data == "show_stats")
        self.router.callback_query.register(self.show_post_graph, F.data == "show_graph")
        self.router.callback_query.register(self.back_to_admin_menu, F.data == "back_to_admin")
        self.router.callback_query.register(self.auto_schedule_posts, F.data == "auto_schedule")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –ø–æ—Å—Ç–∞
        self.router.callback_query.register(self.view_post_details, F.data.startswith("view_post_"))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        self.router.callback_query.register(self.reschedule_post, F.data.startswith("reschedule_"))
        self.router.message.register(self.process_post_date, AdminStates.waiting_for_post_date)
        self.router.message.register(self.process_post_time, AdminStates.waiting_for_post_time)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        self.router.callback_query.register(self.delete_post, F.data.startswith("delete_post_"))
        self.router.callback_query.register(self.confirm_delete_post, F.data.startswith("confirm_delete_"))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π
        self.router.callback_query.register(self.show_schedule_settings, F.data == "schedule_settings")
        self.router.callback_query.register(self.edit_timezone, F.data == "edit_timezone")
        self.router.callback_query.register(self.edit_schedule_time, F.data.startswith("edit_schedule_time_"))
        self.router.message.register(self.process_timezone, AdminStates.waiting_for_timezone)
        self.router.message.register(self.process_schedule_time, AdminStates.waiting_for_schedule_time)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π
        self.router.callback_query.register(self.show_api_settings, F.data == "api_settings")
        self.router.callback_query.register(self.edit_openrouter_api_key, F.data == "edit_openrouter_api_key")
        self.router.callback_query.register(self.edit_openai_api_key, F.data == "edit_openai_api_key")
        self.router.message.register(self.process_api_key, AdminStates.waiting_for_api_key)
        
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    async def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return user_id in ADMIN_IDS
    
    async def cmd_admin(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
        user_id = message.from_user.id
        
        if not await self.is_admin(user_id):
            await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã", callback_data="show_scheduled")],
            [InlineKeyboardButton(text="ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="auto_schedule")],
            [InlineKeyboardButton(text="‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", callback_data="schedule_settings")],
            [InlineKeyboardButton(text="üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API", callback_data="api_settings")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π", callback_data="show_stats")],
            [InlineKeyboardButton(text="üìà –ì—Ä–∞—Ñ–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π", callback_data="show_graph")]
        ])
        
        await message.answer("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –±–æ—Ç–∞ @async_news_bot", reply_markup=keyboard)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫—Ä—ã–ª –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    
    async def show_scheduled_posts(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã"""
        user_id = callback.from_user.id
        
        if not await self.is_admin(user_id):
            await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        scheduled_posts = await self.get_scheduled_posts()
        
        if not scheduled_posts:
            await callback.message.edit_text(
                "üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
                ])
            )
            await callback.answer()
            return
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ—Å—Ç–æ–≤
        message_text = "üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã:\n\n"
        
        for post in scheduled_posts:
            pub_date = post["scheduled_date"].strftime("%d.%m.%Y %H:%M")
            message_text += f"üîπ ID: {post['id']} - {pub_date}\n"
            message_text += f"   {post['title'][:50]}...\n\n"
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞
        keyboard = []
        for post in scheduled_posts:
            keyboard.append([InlineKeyboardButton(
                text=f"–ü–æ—Å—Ç #{post['id']} ({post['scheduled_date'].strftime('%d.%m %H:%M')})",
                callback_data=f"view_post_{post['id']}"
            )])
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")])
        
        await callback.message.edit_text(
            message_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        await callback.answer()
    
    async def view_post_details(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
        user_id = callback.from_user.id
        
        if not await self.is_admin(user_id):
            await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ—Å—Ç–∞ –∏–∑ callback_data
        post_id = int(callback.data.split("_")[-1])
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å—Ç–µ
        post = await self.get_post_by_id(post_id)
        
        if not post:
            await callback.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–µ—Ç–∞–ª—è–º–∏ –ø–æ—Å—Ç–∞
        message_text = f"üìù –î–µ—Ç–∞–ª–∏ –ø–æ—Å—Ç–∞ #{post['id']}\n\n"
        message_text += f"üìÖ –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {post['scheduled_date'].strftime('%d.%m.%Y %H:%M')}\n"
        message_text += f"üìã –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {post['category']}\n\n"
        message_text += f"üî∑ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {post['processed_title']}\n\n"
        message_text += f"üìÑ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n{post['processed_content'][:300]}...\n\n"
        message_text += f"üîó URL: {post['url']}"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è –ø–æ—Å—Ç–∞
        keyboard = [
            [InlineKeyboardButton(text="‚è± –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", callback_data=f"reschedule_{post['id']}")],
            [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –æ—á–µ—Ä–µ–¥–∏", callback_data=f"delete_post_{post['id']}")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="show_scheduled")]
        ]
        
        await callback.message.edit_text(
            message_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        await callback.answer()
    
    async def reschedule_post(self, callback: CallbackQuery, state: FSMContext):
        """–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞"""
        user_id = callback.from_user.id
        
        if not await self.is_admin(user_id):
            await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ—Å—Ç–∞ –∏–∑ callback_data
        post_id = int(callback.data.split("_")[-1])
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID –ø–æ—Å—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(post_id=post_id)
        
        await callback.message.edit_text(
            "üìÖ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"view_post_{post_id}")]
            ])
        )
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞—Ç—ã
        await state.set_state(AdminStates.waiting_for_post_date)
        await callback.answer()
    
    async def process_post_date(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        user_id = message.from_user.id
        
        if not await self.is_admin(user_id):
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
        try:
            date_str = message.text.strip()
            new_date = datetime.strptime(date_str, "%d.%m.%Y").date()
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(new_date=new_date)
            
            # –ó–∞–ø—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            await message.answer(
                "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="show_scheduled")]
                ])
            )
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
            await state.set_state(AdminStates.waiting_for_post_time)
            
        except ValueError:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="show_scheduled")]
                ])
            )
    
    async def process_post_time(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        user_id = message.from_user.id
        
        if not await self.is_admin(user_id):
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        post_id = data.get("post_id")
        new_date = data.get("new_date")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
        try:
            time_str = message.text.strip()
            hour, minute = map(int, time_str.split(":"))
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
            new_datetime = datetime.combine(new_date, datetime.min.time()) + timedelta(hours=hour, minutes=minute)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            success = await self.update_post_schedule(post_id, new_datetime)
            
            if success:
                await message.answer(
                    f"‚úÖ –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ #{post_id} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_datetime.strftime('%d.%m.%Y %H:%M')}",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üìÖ –ö —Å–ø–∏—Å–∫—É –ø–æ—Å—Ç–æ–≤", callback_data="show_scheduled")],
                        [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_admin")]
                    ])
                )
            else:
                await message.answer(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üìÖ –ö —Å–ø–∏—Å–∫—É –ø–æ—Å—Ç–æ–≤", callback_data="show_scheduled")]
                    ])
                )
            
            # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
            await state.clear()
            
        except (ValueError, IndexError):
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="show_scheduled")]
                ])
            )
    
    async def delete_post(self, callback: CallbackQuery):
        """–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
        user_id = callback.from_user.id
        
        if not await self.is_admin(user_id):
            await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ—Å—Ç–∞ –∏–∑ callback_data
        post_id = int(callback.data.split("_")[-1])
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{post_id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"view_post_{post_id}")]
        ])
        
        await callback.message.edit_text(
            f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç #{post_id} –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π?",
            reply_markup=keyboard
        )
        await callback.answer()
    
    async def confirm_delete_post(self, callback: CallbackQuery):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
        user_id = callback.from_user.id
        
        if not await self.is_admin(user_id):
            await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ—Å—Ç–∞ –∏–∑ callback_data
        post_id = int(callback.data.split("_")[-1])
        
        try:
            # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã scheduled_posts
            with self.db.conn.cursor() as cursor:
                cursor.execute("""
                    DELETE FROM scheduled_posts
                    WHERE news_id = %s
                    RETURNING id
                """, (post_id,))
                result = cursor.fetchone()
                self.db.conn.commit()
                
                if result:
                    await callback.message.edit_text(
                        f"‚úÖ –ü–æ—Å—Ç #{post_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="üìÖ –ö —Å–ø–∏—Å–∫—É –ø–æ—Å—Ç–æ–≤", callback_data="show_scheduled")],
                            [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_admin")]
                        ])
                    )
                    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} —É–¥–∞–ª–∏–ª –ø–æ—Å—Ç #{post_id} –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π")
                else:
                    await callback.message.edit_text(
                        f"‚ùå –ü–æ—Å—Ç #{post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="üìÖ –ö —Å–ø–∏—Å–∫—É –ø–æ—Å—Ç–æ–≤", callback_data="show_scheduled")]
                        ])
                    )
        except Exception as e:
            self.db.conn.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞ #{post_id}: {e}")
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞: {e}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìÖ –ö —Å–ø–∏—Å–∫—É –ø–æ—Å—Ç–æ–≤", callback_data="show_scheduled")]
                ])
            )
        
        await callback.answer()
    
    async def show_post_stats(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
        user_id = callback.from_user.id
        
        if not await self.is_admin(user_id):
            await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        stats = await self.get_publication_stats()
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        message_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π:\n\n"
        
        message_text += f"üìù –í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –±–∞–∑–µ: {stats['total_news']}\n"
        message_text += f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {stats['published']}\n"
        message_text += f"‚è≥ –í –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é: {stats['scheduled']}\n"
        message_text += f"üîÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ AI: {stats['processed']}\n\n"
        
        message_text += "üìà –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
        for category, count in stats['categories'].items():
            message_text += f"- {category}: {count}\n"
        
        await callback.message.edit_text(
            message_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
            ])
        )
        await callback.answer()
    
    async def show_post_graph(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
        user_id = callback.from_user.id
        
        if not await self.is_admin(user_id):
            await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        graph_data = await self.get_graph_data()
        
        if not graph_data['dates']:
            await callback.message.edit_text(
                "üìà –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
                ])
            )
            await callback.answer()
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        plt.figure(figsize=(10, 6))
        plt.plot(graph_data['dates'], graph_data['counts'], marker='o', linestyle='-', color='#1e88e5')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        plt.title('–ì—Ä–∞—Ñ–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π')
        plt.xlabel('–î–∞—Ç–∞')
        plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π')
        plt.grid(True, linestyle='--', alpha=0.7)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–∏ X –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—Ç
        plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%d.%m'))
        plt.gca().xaxis.set_major_locator(mdates.DayLocator(interval=5))
        plt.gcf().autofmt_xdate()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ –±—É—Ñ–µ—Ä
        buf = io.BytesIO()
        plt.savefig(buf, format='png', dpi=100)
        buf.seek(0)
        plt.close()

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –±—É—Ñ–µ—Ä–∞ –≤ BufferedInputFile
        image_file = BufferedInputFile(buf.read(), filename="graph.png")

        await callback.message.delete()
        await self.bot.send_photo(
            chat_id=user_id,
            photo=image_file,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º BufferedInputFile
            caption="üìà –ì—Ä–∞—Ñ–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
            ])
        )
        await callback.answer()
    
    async def back_to_admin_menu(self, callback: CallbackQuery):
        """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã", callback_data="show_scheduled")],
            [InlineKeyboardButton(text="ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="auto_schedule")],
            [InlineKeyboardButton(text="‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", callback_data="schedule_settings")],
            [InlineKeyboardButton(text="üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API", callback_data="api_settings")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π", callback_data="show_stats")],
            [InlineKeyboardButton(text="üìà –ì—Ä–∞—Ñ–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π", callback_data="show_graph")]
        ])
        
        await callback.message.edit_text("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –±–æ—Ç–∞ @async_news_bot", reply_markup=keyboard)
        await callback.answer()
        
    async def show_api_settings(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π"""
        user_id = callback.from_user.id
        
        if not await self.is_admin(user_id):
            await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π API –∫–ª—é—á–µ–π –∏–∑ .env —Ñ–∞–π–ª–∞
        openrouter_api_key = os.getenv('OPENROUTER_API_KEY', '')
        openai_api_key = os.getenv('OPENAI_API_KEY', '')
        news_api_key = os.getenv('NEWS_API_KEY', '')
        
        # –ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞ API –∫–ª—é—á–µ–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        masked_openrouter = self.mask_api_key(openrouter_api_key)
        masked_openai = self.mask_api_key(openai_api_key)
        masked_news = self.mask_api_key(news_api_key)
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ API
        message_text = "üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π:\n\n"
        message_text += f"ü§ñ OpenRouter API Key: {masked_openrouter}\n"
        message_text += f"üß† OpenAI API Key: {masked_openai}\n"
        message_text += f"üì∞ News API Key: {masked_news}\n"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = [
            [InlineKeyboardButton(
                text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å OpenRouter API Key", 
                callback_data="edit_openrouter_api_key"
            )],
            [InlineKeyboardButton(
                text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å OpenAI API Key", 
                callback_data="edit_openai_api_key"
            )],
            [InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥", 
                callback_data="back_to_admin"
            )]
        ]
        
        await callback.message.edit_text(
            message_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        await callback.answer()
    
    def mask_api_key(self, api_key):
        """–ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞ API –∫–ª—é—á–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not api_key or len(api_key) < 8:
            return "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 4 –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Å–∏–º–≤–æ–ª–∞
        return f"{api_key[:4]}...{api_key[-4:]}"
    
    async def edit_openrouter_api_key(self, callback: CallbackQuery, state: FSMContext):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ OpenRouter API Key"""
        user_id = callback.from_user.id
        
        if not await self.is_admin(user_id):
            await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è API –∫–ª—é—á–∞
        current_key = os.getenv('OPENROUTER_API_KEY', '')
        masked_key = self.mask_api_key(current_key)
        
        await callback.message.edit_text(
            f"üîë –¢–µ–∫—É—â–∏–π OpenRouter API Key: {masked_key}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π API –∫–ª—é—á –¥–ª—è OpenRouter:\n"
            "–§–æ—Ä–º–∞—Ç: sk-or-v1-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="api_settings")]
            ])
        )
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ API –∫–ª—é—á–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–ª—é—á–∞
        await state.update_data(api_key_type='openrouter')
        await state.set_state(AdminStates.waiting_for_api_key)
        await callback.answer()
        
    async def edit_openai_api_key(self, callback: CallbackQuery, state: FSMContext):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ OpenAI API Key"""
        user_id = callback.from_user.id
        
        if not await self.is_admin(user_id):
            await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è API –∫–ª—é—á–∞
        current_key = os.getenv('OPENAI_API_KEY', '')
        masked_key = self.mask_api_key(current_key)
        
        await callback.message.edit_text(
            f"üîë –¢–µ–∫—É—â–∏–π OpenAI API Key: {masked_key}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π API –∫–ª—é—á –¥–ª—è OpenAI:\n"
            "–§–æ—Ä–º–∞—Ç: sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="api_settings")]
            ])
        )
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ API –∫–ª—é—á–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–ª—é—á–∞
        await state.update_data(api_key_type='openai')
        await state.set_state(AdminStates.waiting_for_api_key)
        await callback.answer()
    
    async def process_api_key(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ API –∫–ª—é—á–∞"""
        user_id = message.from_user.id
        
        if not await self.is_admin(user_id):
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ API –∫–ª—é—á–∞ –∏ –µ–≥–æ —Ç–∏–ø–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        new_api_key = message.text.strip()
        data = await state.get_data()
        api_key_type = data.get('api_key_type', 'openrouter')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ API –∫–ª—é—á–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if api_key_type == 'openrouter':
            if not new_api_key.startswith('sk-or-v1-') or len(new_api_key) < 20:
                await message.answer(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç API –∫–ª—é—á–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–ª—é—á OpenRouter API.\n"
                    "–§–æ—Ä–º–∞—Ç: sk-or-v1-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="api_settings")]
                    ])
                )
                return
            env_var_name = 'OPENROUTER_API_KEY'
            api_name = 'OpenRouter'
        elif api_key_type == 'openai':
            if not new_api_key.startswith('sk-') or len(new_api_key) < 20:
                await message.answer(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç API –∫–ª—é—á–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–ª—é—á OpenAI API.\n"
                    "–§–æ—Ä–º–∞—Ç: sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="api_settings")]
                    ])
                )
                return
            env_var_name = 'OPENAI_API_KEY'
            api_name = 'OpenAI'
        else:
            await message.answer(
                "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø API –∫–ª—é—á–∞",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîë –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º API", callback_data="api_settings")]
                ])
            )
            await state.clear()
            return
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞ –≤ .env —Ñ–∞–π–ª–µ
        success = await self.update_env_variable(env_var_name, new_api_key)
        
        if success:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
            os.environ[env_var_name] = new_api_key
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏—Ö API –∫–ª—é—á
            if api_key_type == 'openrouter':
                try:
                    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º AIProcessor –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
                    from ai_processor import AIProcessor
                    
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä AIProcessor —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –∫–ª—é—á–æ–º
                    new_ai_processor = AIProcessor(self.db)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º AI-–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –µ—Å—Ç—å
                    if hasattr(self.db, 'ai_processor'):
                        self.db.ai_processor = new_ai_processor
                        logger.info(f"AI-–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω —Å –Ω–æ–≤—ã–º –∫–ª—é—á–æ–º OpenRouter")
                    
                    # –ï—Å–ª–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ AI-–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
                    try:
                        from scheduler import Scheduler
                        import sys
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
                        for module_name, module in sys.modules.items():
                            if module_name == 'scheduler' and hasattr(module, 'scheduler_instance'):
                                if hasattr(module.scheduler_instance, 'ai_processor'):
                                    module.scheduler_instance.ai_processor = new_ai_processor
                                    logger.info(f"AI-–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω —Å –Ω–æ–≤—ã–º –∫–ª—é—á–æ–º OpenRouter")
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å AI-–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
                    
                    reload_message = "‚úÖ AI-–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω —Å –Ω–æ–≤—ã–º –∫–ª—é—á–æ–º."
                    logger.info(f"AI-–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω —Å –Ω–æ–≤—ã–º –∫–ª—é—á–æ–º OpenRouter")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ AI-–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {e}")
                    reload_message = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å AI-–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä. –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ."
            else:
                reload_message = "‚ö†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—Ä–æ—Å–µ –∫ API."
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            masked_key = self.mask_api_key(new_api_key)
            await message.answer(
                f"‚úÖ {api_name} API Key —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {masked_key}\n\n"
                f"{reload_message}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîë –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º API", callback_data="api_settings")],
                    [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_admin")]
                ])
            )
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è API –∫–ª—é—á–∞
            logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} –∏–∑–º–µ–Ω–∏–ª {api_name} API Key")
        else:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å API –∫–ª—é—á. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É .env",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîë –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º API", callback_data="api_settings")]
                ])
            )
        
        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.clear()
    
    async def update_env_variable(self, variable_name, new_value):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ —Ñ–∞–π–ª–µ .env"""
        try:
            # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É .env
            env_path = os.path.join(os.getcwd(), '.env')
            
            # –ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
            with open(env_path, 'r', encoding='utf-8') as file:
                lines = file.readlines()
            
            # –ü–æ–∏—Å–∫ –∏ –∑–∞–º–µ–Ω–∞ –Ω—É–∂–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
            updated = False
            for i, line in enumerate(lines):
                if line.startswith(f"{variable_name}="):
                    lines[i] = f"{variable_name}={new_value}\n"
                    updated = True
                    break
            
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
            if not updated:
                lines.append(f"{variable_name}={new_value}\n")
            
            # –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
            with open(env_path, 'w', encoding='utf-8') as file:
                file.writelines(lines)
            
            logger.info(f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {variable_name} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ —Ñ–∞–π–ª–µ .env")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π {variable_name} –≤ —Ñ–∞–π–ª–µ .env: {e}")
            return False
    
    async def show_schedule_settings(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
        user_id = callback.from_user.id
        
        if not await self.is_admin(user_id):
            await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        settings = await self.get_schedule_settings()
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        message_text = "‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π:\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
        timezone = next((s['value'] for s in settings if s['name'] == 'timezone'), 'Europe/Moscow')
        message_text += f"üåê –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone} (–ú–°–ö)\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
        message_text += "‚è± –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π (–ú–°–ö):\n"
        for i in range(1, 4):
            time_value = next((s['value'] for s in settings if s['name'] == f'publish_time_{i}'), f'{8+i*3}:00')
            message_text += f"   {i}. {time_value}\n"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        for i in range(1, 4):
            keyboard.append([InlineKeyboardButton(
                text=f"‚è± –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è #{i}", 
                callback_data=f"edit_schedule_time_{i}"
            )])
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        keyboard.append([InlineKeyboardButton(
            text="üåê –ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å", 
            callback_data="edit_timezone"
        )])
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        keyboard.append([InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥", 
            callback_data="back_to_admin"
        )])
        
        await callback.message.edit_text(
            message_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        await callback.answer()
    
    async def edit_timezone(self, callback: CallbackQuery, state: FSMContext):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
        user_id = callback.from_user.id
        
        if not await self.is_admin(user_id):
            await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        settings = await self.get_schedule_settings()
        current_timezone = next((s['value'] for s in settings if s['name'] == 'timezone'), 'Europe/Moscow')
        
        await callback.message.edit_text(
            f"üåê –¢–µ–∫—É—â–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {current_timezone} (–ú–°–ö)\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'Europe/Moscow'.\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞ –¥–ª—è –†–æ—Å—Å–∏–∏:\n"
            "- Europe/Moscow (–ú–æ—Å–∫–≤–∞, UTC+3)\n"
            "- Europe/Kaliningrad (–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥, UTC+2)\n"
            "- Europe/Samara (–°–∞–º–∞—Ä–∞, UTC+4)\n"
            "- Asia/Yekaterinburg (–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥, UTC+5)\n"
            "- Asia/Omsk (–û–º—Å–∫, UTC+6)\n"
            "- Asia/Krasnoyarsk (–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫, UTC+7)\n"
            "- Asia/Irkutsk (–ò—Ä–∫—É—Ç—Å–∫, UTC+8)\n"
            "- Asia/Yakutsk (–Ø–∫—É—Ç—Å–∫, UTC+9)\n"
            "- Asia/Vladivostok (–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫, UTC+10)\n"
            "- Asia/Magadan (–ú–∞–≥–∞–¥–∞–Ω, UTC+11)\n"
            "- Asia/Kamchatka (–ö–∞–º—á–∞—Ç–∫–∞, UTC+12)",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="schedule_settings")]
            ])
        )
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        await state.set_state(AdminStates.waiting_for_timezone)
        await callback.answer()
    
    async def process_timezone(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
        user_id = message.from_user.id
        
        if not await self.is_admin(user_id):
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        timezone_name = message.text.strip()
        
        try:
            import pytz
            tz = pytz.timezone(timezone_name)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            success = await self.update_schedule_setting('timezone', timezone_name)
            
            if success:
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
                await message.answer(
                    f"‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {timezone_name} (–ú–°–ö)"
                    f"\n\n‚ö†Ô∏è –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚è∞ –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", callback_data="schedule_settings")],
                        [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_admin")]
                    ])
                )
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
                logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} –∏–∑–º–µ–Ω–∏–ª —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –Ω–∞ {timezone_name}")
            else:
                await message.answer(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚è∞ –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", callback_data="schedule_settings")]
                    ])
                )
            
            # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
            await state.clear()
            
        except Exception as e:
            await message.answer(
                f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞: {str(e)}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, Europe/Moscow)",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="schedule_settings")]
                ])
            )
    
    async def edit_schedule_time(self, callback: CallbackQuery, state: FSMContext):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        user_id = callback.from_user.id
        
        if not await self.is_admin(user_id):
            await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Å–ª–æ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ callback_data
        slot_number = int(callback.data.split("_")[-1])
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        settings = await self.get_schedule_settings()
        current_time = next((s['value'] for s in settings if s['name'] == f'publish_time_{slot_number}'), '09:00')
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Å–ª–æ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(slot_number=slot_number)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
        timezone = next((s['value'] for s in settings if s['name'] == 'timezone'), 'Europe/Moscow')
        
        await callback.message.edit_text(
            f"‚è± –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ #{slot_number}: {current_time} (–ú–°–ö)\n\n"
            f"üåê –¢–µ–∫—É—â–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30)",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="schedule_settings")]
            ])
        )
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏
        await state.set_state(AdminStates.waiting_for_schedule_time)
        await callback.answer()
    
    async def process_schedule_time(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        user_id = message.from_user.id
        
        if not await self.is_admin(user_id):
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        slot_number = data.get("slot_number")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
        try:
            time_str = message.text.strip()
            hour, minute = map(int, time_str.split(":"))
            
            if hour < 0 or hour > 23 or minute < 0 or minute > 59:
                raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú
            formatted_time = f"{hour:02d}:{minute:02d}"
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            success = await self.update_schedule_setting(f'publish_time_{slot_number}', formatted_time)
            
            if success:
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
                await message.answer(
                    f"‚úÖ –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ #{slot_number} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {formatted_time} (–ú–°–ö)\n\n"
                    f"‚ö†Ô∏è –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚è∞ –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", callback_data="schedule_settings")],
                        [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_admin")]
                    ])
                )
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} –∏–∑–º–µ–Ω–∏–ª –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ #{slot_number} –Ω–∞ {formatted_time}")
            else:
                await message.answer(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚è∞ –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", callback_data="schedule_settings")]
                    ])
                )
            
            # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
            await state.clear()
            
        except (ValueError, IndexError):
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30)",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="schedule_settings")]
                ])
            )
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    
    async def get_scheduled_posts(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with self.db.conn.cursor() as cursor:
                cursor.execute("""
                    SELECT n.id, n.title, n.url, n.category, s.scheduled_date,
                           p.processed_title, p.processed_content, s.status, s.attempts
                    FROM news n
                    JOIN processed_news p ON n.id = p.news_id
                    JOIN scheduled_posts s ON n.id = s.news_id
                    WHERE n.processed = TRUE AND n.published = FALSE
                    ORDER BY s.scheduled_date ASC
                """)
                
                posts = [{
                    'id': row[0],
                    'title': row[1],
                    'url': row[2],
                    'category': row[3],
                    'scheduled_date': row[4],
                    'processed_title': row[5],
                    'processed_content': row[6],
                    'status': row[7],
                    'attempts': row[8]
                } for row in cursor.fetchall()]
                
                return posts
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {e}")
            return []
    
    async def get_post_by_id(self, post_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å—Ç–µ –ø–æ ID"""
        try:
            with self.db.conn.cursor() as cursor:
                cursor.execute("""
                    SELECT n.id, n.title, n.url, n.category, 
                           COALESCE(s.scheduled_date, n.published_date) as scheduled_date,
                           p.processed_title, p.processed_content,
                           s.status, s.attempts
                    FROM news n
                    JOIN processed_news p ON n.id = p.news_id
                    LEFT JOIN scheduled_posts s ON n.id = s.news_id
                    WHERE n.id = %s
                """, (post_id,))
                
                row = cursor.fetchone()
                if not row:
                    return None
                
                return {
                    'id': row[0],
                    'title': row[1],
                    'url': row[2],
                    'category': row[3],
                    'scheduled_date': row[4],
                    'processed_title': row[5],
                    'processed_content': row[6],
                    'status': row[7],
                    'attempts': row[8]
                }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å—Ç–µ: {e}")
            return None
    
    async def update_post_schedule(self, post_id, new_datetime):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ schedule_post –∏–∑ –∫–ª–∞—Å—Å–∞ Database
            result = self.db.schedule_post(post_id, new_datetime)
            if result:
                logger.info(f"–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ #{post_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {new_datetime}")
                return True
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ #{post_id}")
                return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
            return False
    
    async def get_publication_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
        try:
            stats = {
                'total_news': 0,
                'published': 0,
                'scheduled': 0,
                'processed': 0,
                'categories': {}
            }
            
            with self.db.conn.cursor() as cursor:
                # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π
                cursor.execute("SELECT COUNT(*) FROM news")
                stats['total_news'] = cursor.fetchone()[0]
                
                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
                cursor.execute("SELECT COUNT(*) FROM news WHERE published = TRUE")
                stats['published'] = cursor.fetchone()[0]
                
                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
                cursor.execute("SELECT COUNT(*) FROM news WHERE processed = TRUE AND published = FALSE")
                stats['scheduled'] = cursor.fetchone()[0]
                
                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
                cursor.execute("SELECT COUNT(*) FROM news WHERE processed = TRUE")
                stats['processed'] = cursor.fetchone()[0]
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                cursor.execute("""
                    SELECT category, COUNT(*)
                    FROM news
                    GROUP BY category
                    ORDER BY COUNT(*) DESC
                """)
                
                for row in cursor.fetchall():
                    stats['categories'][row[0]] = row[1]
            
            return stats
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π: {e}")
            return {
                'total_news': 0,
                'published': 0,
                'scheduled': 0,
                'processed': 0,
                'categories': {}
            }
    
    async def get_graph_data(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            thirty_days_ago = datetime.now() - timedelta(days=30)
            
            with self.db.conn.cursor() as cursor:
                cursor.execute("""
                    SELECT DATE(created_at) as pub_date, COUNT(*)
                    FROM news
                    WHERE published = TRUE AND created_at >= %s
                    GROUP BY DATE(created_at)
                    ORDER BY pub_date
                """, (thirty_days_ago,))
                
                dates = []
                counts = []
                
                for row in cursor.fetchall():
                    dates.append(row[0])
                    counts.append(row[1])
            
            return {'dates': dates, 'counts': counts}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
            return {'dates': [], 'counts': []}
            
    async def get_schedule_settings(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            settings = self.db.get_all_schedule_settings()
            return settings
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
            return []
    
    async def update_schedule_setting(self, name, value):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            success = self.db.update_schedule_setting(name, value)
            if success:
                # –ü–æ–ø—ã—Ç–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
                await self.sync_scheduler_settings()
            return success
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
            return False
            
    async def sync_scheduler_settings(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º –∑–∞–¥–∞—á"""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            from scheduler import Scheduler
            import schedule
            
            # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            schedule.clear()
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            settings = await self.get_schedule_settings()
            timezone_name = next((s['value'] for s in settings if s['name'] == 'timezone'), 'Europe/Moscow')
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            publish_times = []
            for i in range(1, 4):
                time_setting = next((s['value'] for s in settings if s['name'] == f'publish_time_{i}'), None)
                if time_setting:
                    publish_times.append(time_setting)
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            logger.info(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å {timezone_name}, –≤—Ä–µ–º–µ–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ {publish_times}")
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            # –ù–æ —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º: {e}")
            return False
    
    async def auto_schedule_posts(self, callback: CallbackQuery):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ 10 –ø–æ—Å—Ç–æ–≤"""
        user_id = callback.from_user.id
        
        if not await self.is_admin(user_id):
            await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
            return
        
        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
        await callback.message.edit_text(
            "üîÑ –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤..."
        )
        await callback.answer()
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            from news_api import NewsAPI
            from ai_processor import AIProcessor
            
            news_api = NewsAPI(self.db)
            ai_processor = AIProcessor(self.db)
            
            # –®–∞–≥ 1: –°–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ API
            await callback.message.edit_text("üîç –°–æ–±–∏—Ä–∞—é —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ API...")
            
            # –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ –Ω–æ–≤–æ—Å—Ç–µ–π, —á–µ–º –Ω—É–∂–Ω–æ, –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–æ–π–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É
            articles = []
            for keyword in news_api.keywords[:5]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
                batch = news_api.fetch_news(keyword=keyword, max_results=5)
                articles.extend(batch)
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await asyncio.sleep(1)
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            unique_articles = {}
            for article in articles:
                url = article.get("link", "")
                if url and url not in unique_articles:
                    unique_articles[url] = article
            
            articles = list(unique_articles.values())
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
            filtered_articles = news_api.filter_news(articles)
            saved_count = news_api.save_news_to_db(filtered_articles)
            
            if saved_count == 0:
                await callback.message.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
                    ])
                )
                return
            
            # –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –ø–æ–º–æ—â—å—é –ò–ò
            await callback.message.edit_text(f"üß† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {saved_count} –Ω–æ–≤–æ—Å—Ç–µ–π —Å –ø–æ–º–æ—â—å—é –ò–ò...")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            with self.db.conn.cursor() as cursor:
                cursor.execute("""
                    SELECT id, title, content, url, category
                    FROM news
                    WHERE processed = FALSE
                    ORDER BY published_date DESC
                    LIMIT 15
                """)
                news_items = [{
                    'id': row[0],
                    'title': row[1],
                    'content': row[2],
                    'url': row[3],
                    'category': row[4]
                } for row in cursor.fetchall()]
            
            if not news_items:
                await callback.message.edit_text(
                    "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
                    ])
                )
                return
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ AI
            results = ai_processor.process_batch(news_items, batch_size=15)
            
            # –ü–æ–¥—Å—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
            processed_news = [result for result in results if result.get("success", False)]
            processed_count = len(processed_news)
            
            if processed_count == 0:
                await callback.message.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
                    ])
                )
                return
            
            # –®–∞–≥ 3: –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π —Å —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            await callback.message.edit_text(f"üìÖ –ü–ª–∞–Ω–∏—Ä—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é {min(processed_count, 10)} –ø–æ—Å—Ç–æ–≤...")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            with self.db.conn.cursor() as cursor:
                cursor.execute("""
                    SELECT n.id
                    FROM news n
                    JOIN processed_news p ON n.id = p.news_id
                    WHERE n.processed = TRUE AND n.published = FALSE
                    ORDER BY n.published_date ASC
                    LIMIT 10
                """)
                post_ids = [row[0] for row in cursor.fetchall()]
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π (–Ω–∞—á–∏–Ω–∞—è —Å —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ + 1 —á–∞—Å)
            start_time = datetime.now() + timedelta(hours=1)
            # –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞)
            time_interval = timedelta(hours=2)
            
            scheduled_count = 0
            for i, post_id in enumerate(post_ids):
                # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Å—Ç–∞
                publish_time = start_time + (time_interval * i)
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                success = await self.update_post_schedule(post_id, publish_time)
                if success:
                    scheduled_count += 1
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
            message_text = f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n"
            message_text += f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
            message_text += f"- –°–æ–±—Ä–∞–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {saved_count}\n"
            message_text += f"- –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ò–ò: {processed_count}\n"
            message_text += f"- –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {scheduled_count}\n\n"
            
            if scheduled_count > 0:
                message_text += f"üìÖ –ü–æ—Å—Ç—ã –±—É–¥—É—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ {scheduled_count * 2} —á–∞—Å–æ–≤, –Ω–∞—á–∏–Ω–∞—è —Å {start_time.strftime('%d.%m.%Y %H:%M')}"
            
            await callback.message.edit_text(
                message_text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìÖ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", callback_data="show_scheduled")],
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_admin")]
                ])
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤: {e}")
            await callback.message.edit_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤: {str(e)}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
                ])
            )