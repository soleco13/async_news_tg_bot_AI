import os
import logging
import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from dotenv import load_dotenv
from database import Database

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("telegram_publisher.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class TelegramPublisher:
    def __init__(self, db):
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.channel_id = os.getenv('TELEGRAM_CHANNEL_ID')
        self.db = db
        self.bot = Bot(token=self.bot_token)
        self.dp = Dispatcher()
    
    async def format_message(self, news_item):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            title = news_item['processed_title']
            content = news_item['processed_content']
            url = news_item['url']
            category = news_item['category']
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö—ç—à—Ç–µ–≥–æ–≤
            hashtags = "#ITNews"
            if "ai" in category.lower() or "artificial intelligence" in category.lower():
                hashtags += " #AI"
            if "web3" in category.lower():
                hashtags += " #Web3"
            if "cybersecurity" in category.lower():
                hashtags += " #Cybersecurity"
            if "ux" in category.lower() or "ui" in category.lower():
                hashtags += " #UXUI"
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
            message = f"{title}\n\n{content}\n\n[–ü–æ–¥—Ä–æ–±–Ω–µ–µ]({url})\n\n{hashtags}"
            
            return message
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return None
    
    async def publish_news(self, news_item, max_retries=3):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–∏ –≤ Telegram-–∫–∞–Ω–∞–ª —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫"""
        retries = 0
        while retries < max_retries:
            try:
                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                message = await self.format_message(news_item)
                if not message:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ {news_item['id']}")
                    return False
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª
                await self.bot.send_message(
                    chat_id=self.channel_id,
                    text=message,
                    parse_mode=ParseMode.MARKDOWN,
                    disable_web_page_preview=False
                )
                
                # –û—Ç–º–µ—Ç–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏ –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                self.db.mark_as_published(news_item['id'])
                
                logger.info(f"–ù–æ–≤–æ—Å—Ç—å —Å ID {news_item['id']} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª {self.channel_id}")
                return True
            
            except Exception as e:
                retries += 1
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {retries}/{max_retries} –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏ {news_item['id']} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                
                if "Event loop is closed" in str(e):
                    logger.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ event loop, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API")
                    # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å event loop
                    self.bot = Bot(token=self.bot_token)
                
                # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                await asyncio.sleep(2 * retries)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
        
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å {news_item['id']} –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
        return False
    
    async def publish_batch(self, limit=5):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–∞–∫–µ—Ç–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            news_items = self.db.get_unpublished_news(limit)
            
            if not news_items:
                logger.info("–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
                return 0
            
            published_count = 0
            for news_item in news_items:
                success = await self.publish_news(news_item)
                if success:
                    published_count += 1
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏
                await asyncio.sleep(1)
            
            logger.info(f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ {published_count} –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ {len(news_items)}")
            return published_count
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–∞–∫–µ—Ç–∞ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
            return 0
    
    async def publish_test_message(self):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
        try:
            logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram-–∫–∞–Ω–∞–ª")
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            current_time = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
            message = f"ü§ñ –ë–æ—Ç AsyncNews –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n\nüìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {current_time}\n\n#SystemMessage"
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª
            await self.bot.send_message(
                chat_id=self.channel_id,
                text=message,
                parse_mode=ParseMode.MARKDOWN,
                disable_web_page_preview=True
            )
            
            logger.info(f"–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª {self.channel_id}")
            return True
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API"""
        await self.bot.session.close()
        logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API –∑–∞–∫—Ä—ã—Ç–æ")