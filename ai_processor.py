import os
import logging
from openai import OpenAI
from dotenv import load_dotenv
from database import Database

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("ai_processor.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class AIProcessor:
    def __init__(self, db):
        self.openrouter_api_key = os.getenv('OPENROUTER_API_KEY')
        self.site_url = os.getenv('SITE_URL', 'https://async-news.ru')
        self.site_name = os.getenv('SITE_NAME', 'AsyncNews')
        self.db = db
        self.prompt_template = """
        –ü–µ—Ä–µ–ø–∏—à–∏ —Å–ª–µ–¥—É—é—â—É—é –Ω–æ–≤–æ—Å—Ç—å –≤ —Å—Ç–∏–ª–µ Telegram-–ø–æ—Å—Ç–∞ –¥–ª—è IT-–∫–∞–Ω–∞–ª–∞ üîß
        –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
        –ò—Å—Ç–æ—á–Ω–∏–∫ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
        –í—ã–≤–æ–¥–∏ –¢–û–õ–¨–ö–û –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
        –ë–µ–∑ markdown, —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        –û–±—ä—ë–º: 100‚Äì150 —Å–ª–æ–≤
        –ö–∞–∂–¥—ã–π –∞–±–∑–∞—Ü –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç–º–æ–¥–∑–∏ (üì±üíªüî•üöÄüß†üë®‚Äçüíª –∏ –¥—Ä—É–≥–∏–µ)
        –ó–∞–≥–æ–ª–æ–≤–æ–∫ ‚Äî –ó–ê–ì–õ–ê–í–ù–´–ú–ò –ë–£–ö–í–ê–ú–ò, –±—Ä–æ—Å–∫–∏–π
        –°—Ç–∏–ª—å: –ª—ë–≥–∫–∏–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, —Å IT-—é–º–æ—Ä–æ–º
        –¢–æ–Ω: –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π, –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –ª—ë–≥–∫–∏–π —Å–∞—Ä–∫–∞–∑–º
        –í –∫–æ–Ω—Ü–µ ‚Äî —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏ —Ö—ç—à—Ç–µ–≥–∏
        –§–∏–Ω–∞–ª: –∏–Ω—Ç—Ä–∏–≥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–∏–∑—ã–≤ –∫ –¥–∏—Å–∫—É—Å—Å–∏–∏
        –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–æ–≤–æ—Å—Ç–∏: [—É–∫–∞–∂–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–ò, —Å—Ç–∞—Ä—Ç–∞–ø—ã, –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ —Ç.–¥.]
        –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {original_content}
        
        """

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI —Å OpenRouter
        self.client = OpenAI(
            base_url="https://openrouter.ai/api/v1",
            api_key=self.openrouter_api_key
        )

    def process_news(self, news_item):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é AI"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ –¥–ª–∏–Ω—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            content = news_item.get('content', '')
            content_length = len(content)
            
            if content_length < 50:
                logger.warning(f"–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–æ–≤–æ—Å—Ç–∏ '{news_item['title']}' —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π ({content_length} —Å–∏–º–≤–æ–ª–æ–≤). –ö–∞—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∏–∑–∫–∏–º.")
            else:
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏ '{news_item['title']}' —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –¥–ª–∏–Ω–æ–π {content_length} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–º—Ç–∞
            prompt = self.prompt_template.format(
                original_title=news_item['title'],
                original_content=content,
                source_url=news_item['url'],
                category=news_item['category']
            )

            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏ '{news_item['title']}' –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É AI —á–µ—Ä–µ–∑ OpenRouter")

            # –ó–∞–ø—Ä–æ—Å –∫ OpenRouter API —Å –º–æ–¥–µ–ª—å—é Qwen3
            completion = self.client.chat.completions.create(
                extra_headers={
                    "HTTP-Referer": self.site_url,  # –î–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –Ω–∞ openrouter.ai
                    "X-Title": self.site_name,      # –î–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –Ω–∞ openrouter.ai
                },
                extra_body={},
                model="google/gemma-3-27b-it:free",
                messages=[
                    {"role": "system", "content": "–¢—ã - —Ä–µ–¥–∞–∫—Ç–æ—Ä IT-–Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=500,
                temperature=0.7
            )

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI
            ai_response = completion.choices[0].message.content.strip()

            # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç
            lines = ai_response.split('\n')
            processed_title = lines[0] if lines else ""
            processed_content = '\n'.join(lines[1:]) if len(lines) > 1 else ""

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            processed_id = self.db.save_processed_news(
                news_item['id'],
                processed_title,
                processed_content
            )

            if processed_id:
                logger.info(f"–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å ID {processed_id}")
                return {
                    "id": news_item['id'],
                    "processed_title": processed_title,
                    "processed_content": processed_content,
                    "success": True
                }
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
                return {"success": False, "error": "Database error"}

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
            return {"success": False, "error": str(e)}

    def process_batch(self, news_items, batch_size=5):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞ –Ω–æ–≤–æ—Å—Ç–µ–π —Å —É—á–µ—Ç–æ–º –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        results = []
        count = 0
        skipped = 0

        for news_item in news_items:
            if count >= batch_size:
                break

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            content_length = len(news_item.get('content', ''))
            if content_length < 50:
                logger.warning(f"–ü—Ä–æ–ø—É—Å–∫ –Ω–æ–≤–æ—Å—Ç–∏ '{news_item['title']}' –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ({content_length} —Å–∏–º–≤–æ–ª–æ–≤)")
                results.append({
                    "id": news_item['id'],
                    "success": False,
                    "error": "Insufficient content length",
                    "content_length": content_length
                })
                skipped += 1
                continue

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏
            result = self.process_news(news_item)
            results.append(result)

            if result["success"]:
                count += 1
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ—Å—Ç–∏ '{news_item['title']}': {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")

        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {count} –Ω–æ–≤–æ—Å—Ç–µ–π, –ø—Ä–æ–ø—É—â–µ–Ω–æ {skipped} –∏–∑ {len(news_items)}")
        return results